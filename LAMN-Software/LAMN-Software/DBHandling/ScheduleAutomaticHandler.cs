using LAMN_Software.DataClasses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LAMN_Software.DBHandling
{
    public class ScheduleAutomaticHandler
    {
        //int peopleCounter;
        List<Employee> employeeList;
        List<SchedulesMinimum> shiftList;
        List<Schedule> automaticScheduleList;
        List<Preference> preferenceList;



        // method that counts the number of people assigned to a shift
        public List<Schedule> CreateAutomaticSchedule(int weekNmr, List<SchedulesMinimum> shiftList, List<Employee> employeeList, List<Schedule> currentSchedule, List<Preference> preferenceList, EmployeeHandler EH)
        {
            this.shiftList = shiftList;                         //list of shifts with minimum amount of employees required
            this.employeeList = employeeList;                   //list of all employees
            automaticScheduleList = currentSchedule;            //list with all schedules generated by automatic scheduling 
            this.preferenceList = preferenceList;               //list of employees' preferences
            //this.employeeList.Sort();



            //for statement to loop through the shifts
            for (int i = 0; i < shiftList.Count(); i++)
            {
                if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr)) //break one iteration if minimum people has been met
                {
                    continue;
                }

                for (int c = 0; c < preferenceList.Count(); c++) //first assigning shifts according to preferences
                {
                    if ((preferenceList[c].Day == shiftList[i].Day) && (preferenceList[c].TimeSlot == shiftList[i].TimeSlot)) //check if preference matches the current shift we are looking for
                    {
                        if (CheckIfEmployeeAvailable(EH.GetEmployee(preferenceList[c].EmployeeBSN), shiftList[i])) //method to check if employee can be assigned to this shift
                        {
                            if(CheckContractHours(EH.GetEmployee(preferenceList[c].EmployeeBSN))) //check contract hours
                            {
                                automaticScheduleList.Add(new Schedule(weekNmr, shiftList[i].Day, preferenceList[c].EmployeeBSN, shiftList[i].TimeSlot));
                                if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr)) //break the loop if minimum people has been met
                                {
                                    break;
                                }
                            }
                        }
                    }
                }

                if (shiftList[i].MinimumPeople > CountPeopleOnShift(shiftList[i], weekNmr)) //checking if more people need to be assigned so that minimum amount of people on shift is met
                {
                    for (int c = 0; c < employeeList.Count(); c++)
                    {
                        if (CheckIfEmployeeAvailable(EH.GetEmployee(employeeList[c].Bsn), shiftList[i])) //method to check if employee can be assigned to this shift
                        {
                            if (CheckContractHours(EH.GetEmployee(employeeList[c].Bsn))) //check contract hours
                            {
                                automaticScheduleList.Add(new Schedule(weekNmr, shiftList[i].Day, employeeList[c].Bsn, shiftList[i].TimeSlot));
                                if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr)) //break the loop if minimum people has been met
                                {
                                    break;
                                }
                            }
                        }
                    }
                }




            }
            return this.automaticScheduleList;
        }


        // method that counts the number of people already assigned to a shift - check for minimum amount of people on shift
        private int CountPeopleOnShift(SchedulesMinimum SM, int weekNmr)
        {
            int count = 0;

            for (int i = 0; i < automaticScheduleList.Count(); i++) //shifts assigned through automatic scheduling
            {
                if (automaticScheduleList[i].Week == weekNmr)
                {
                    if ((automaticScheduleList[i].Day == SM.Day) && (automaticScheduleList[i].TimeSlot == SM.TimeSlot))
                    {
                        count++;
                    }
                }
            }
            return count; //returns the number of people already assigned to this shift
        }


        //method that checks availability of an employee
        private bool CheckIfEmployeeAvailable(Employee e, SchedulesMinimum SM)
        {
            List<Schedule> employeeSchedule = new List<Schedule>(); //list of shifts for spcific employee

            for (int i = 0; i < automaticScheduleList.Count(); i++)
            {
                if ((automaticScheduleList[i].Day == SM.Day) && (automaticScheduleList[i].EmployeeBSN == e.Bsn))
                {
                    employeeSchedule.Add(automaticScheduleList[i]);
                }
            }

            if (employeeSchedule.Count() >= 2) //if two or more shifts -> no more shifts possible on that day
            {
                return false;
            }
            if (employeeSchedule.Count() == 0) //shift possible if no other shifts on that day
            {
                return true;
            }
            else if (employeeSchedule.Count() == 1) //if one shift -> further check 
            {
                Schedule s = employeeSchedule[0];

                if (SM.TimeSlot == s.TimeSlot) //if employee is already assigned to this shift -> return false
                {
                    return false;
                }
                if ((SM.TimeSlot == TimeSlot.MORNING) && (s.TimeSlot == TimeSlot.EVENING)) //if shifts wouldnt be right after each other -> return false
                {
                    return false;
                }
                if ((SM.TimeSlot == TimeSlot.EVENING) && (s.TimeSlot == TimeSlot.MORNING)) //if shifts wouldnt be right after each other -> return false
                {
                    return false;
                }
                else //shifts right after each other -> return true
                {
                    return true;
                }
            }
            return false;
        }


        private bool CheckContractHours(Employee e)
        {
            int hoursWorked = 0;

            for (int i = 0; i < automaticScheduleList.Count; i++)
            {
                if(e.Bsn==automaticScheduleList[i].EmployeeBSN)
                {
                    hoursWorked += 4;
                }
            }

            if ((hoursWorked + 4) <= e.ContractHours)
            {
                return true;
            }
            else
            {
                return false;
            }
        }






        //public List<Schedule> CreateAutomaticSchedule(int weekNmr, List<SchedulesMinimum> shiftList, List<Employee> employeeList)
        //{
        //    this.shiftList = shiftList;
        //    this.employeeList = employeeList;
        //    automaticScheduleList = new List<Schedule>();
        //    //this.employeeList.Sort();



        //    //for statement to loop through the shifts
        //    for (int i = 0; i < shiftList.Count(); i++)
        //    {
        //        peopleCounter = 0;

        //        //check if minimum people has been met
        //        if (shiftList[i].MinimumPeople == peopleCounter)
        //        {
        //            continue;
        //        }

        //        //take an employee and check if present in the scheduleList
        //        for (int a = 0; a < employeeList.Count(); a++)
        //        {
        //            if (EmployeeAvailableForThisDay(employeeList[a], shiftList[i]))
        //            {
        //                automaticScheduleList.Add(new Schedule(weekNmr, shiftList[i].Day, employeeList[a].Bsn, shiftList[i].TimeSlot));
        //                peopleCounter++;
        //                if (shiftList[i].MinimumPeople == peopleCounter)
        //                {
        //                    break;
        //                }
        //            }
        //        }
        //    }
        //    return this.automaticScheduleList;
        //}

        //method to see if emp is already scheduled 
        private bool EmployeeAvailableForThisDay(Employee emp, SchedulesMinimum minSch)
        {
            foreach (Schedule sch in automaticScheduleList)
            {
                //check if the same day, and if the bsn is present
                if (sch.Day == minSch.Day && sch.EmployeeBSN == emp.Bsn)
                {
                    return false;
                }
            }
            return true;
        }
    }
}
