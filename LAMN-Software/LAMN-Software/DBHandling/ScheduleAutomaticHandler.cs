using LAMN_Software.DataClasses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LAMN_Software.DBHandling
{
    public class ScheduleAutomaticHandler
    {
        int peopleCounter;
        List<Employee> employeeList;
        List<SchedulesMinimum> shiftList;
        List<Schedule> automaticScheduleList;
        List<Schedule> currentSchedule;
        List<Preference> preferenceList;



        // method that counts the number of people assigned to a shift
        public List<Schedule> CreateAutomaticSchedule(int weekNmr, List<SchedulesMinimum> shiftList, List<Employee> employeeList, List<Schedule> currentSchedule, List<Preference> preferenceList)
        {
            this.shiftList = shiftList;                         //list of shifts with minimum amount of employees required
            this.employeeList = employeeList;                   //list of all employees
            automaticScheduleList = new List<Schedule>();       //list with all schedules generated by automatic scheduling 
            this.currentSchedule = currentSchedule;             //schedule for chosen week - automatic schedule will fill the rest of the shifts that haven't been assigned yet
            this.preferenceList = preferenceList;               //list of employees' preferences
            //this.employeeList.Sort();



            //for statement to loop through the shifts
            for (int i = 0; i < shiftList.Count(); i++)
            {
                if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr))
                {
                    continue;
                }

                for (int c = 0; c < preferenceList.Count(); c++) //first assigning shifts according to preferences
                {
                    if ((preferenceList[c].Day == shiftList[i].Day) && (preferenceList[c].TimeSlot == shiftList[i].TimeSlot)) //check if preference matches the current shift we are looking for
                    {
                        automaticScheduleList.Add(new Schedule(weekNmr, shiftList[i].Day, preferenceList[c].EmployeeBSN, shiftList[i].TimeSlot));
                        if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr))
                        {
                            break;
                        }
                    }
                }

                



            }
            return this.automaticScheduleList;
        }


        // method that counts the number of people assigned to a shift
        private int CountPeopleOnShift(SchedulesMinimum SM, int weekNmr)
        {
            int count = 0;

            for (int i = 0; i < automaticScheduleList.Count(); i++)
            {
                if (automaticScheduleList[i].Week == weekNmr)
                {
                    if ((automaticScheduleList[i].Day == SM.Day) && (automaticScheduleList[i].TimeSlot == SM.TimeSlot))
                    {
                        count++;
                    }
                }
            }
            for (int i = 0; i < currentSchedule.Count(); i++)
            {
                if (currentSchedule[i].Week == weekNmr)
                {
                    if ((currentSchedule[i].Day == SM.Day) && (currentSchedule[i].TimeSlot == SM.TimeSlot))
                    {
                        count++;
                    }
                }
            }
            return count;
        }








        //// method that counts the number of people assigned to a shift
        //public List<Schedule> CreateAutomaticSchedule(int weekNmr, List<SchedulesMinimum> shiftList, List<Employee> employeeList)
        //{
        //    this.shiftList = shiftList;
        //    this.employeeList = employeeList;
        //    automaticScheduleList = new List<Schedule>();
        //    //this.employeeList.Sort();



        //    //for statement to loop through the shifts
        //    for (int i = 0; i < shiftList.Count(); i++)
        //    {
        //        peopleCounter = 0;

        //        //check if minimum people has been met
        //        if (shiftList[i].MinimumPeople == peopleCounter)
        //        {
        //            continue;
        //        }

        //        //take an employee and check if present in the scheduleList
        //        for (int a = 0; a < employeeList.Count(); a++)
        //        {
        //            if (EmployeeAvailableForThisDay(employeeList[a], shiftList[i]))
        //            {
        //                automaticScheduleList.Add(new Schedule(weekNmr, shiftList[i].Day, employeeList[a].Bsn, shiftList[i].TimeSlot));
        //                peopleCounter++;
        //                if (shiftList[i].MinimumPeople == peopleCounter)
        //                {
        //                    break;
        //                }
        //            }
        //        }
        //    }
        //    return this.automaticScheduleList;
        //}

        //method to see if emp is already scheduled 
        private bool EmployeeAvailableForThisDay(Employee emp, SchedulesMinimum minSch)
        {
            foreach (Schedule sch in automaticScheduleList)
            {
                //check if the same day, and if the bsn is present
                if (sch.Day == minSch.Day && sch.EmployeeBSN == emp.Bsn)
                {
                    return false;
                }
            }
            return true;
        }
    }
}
