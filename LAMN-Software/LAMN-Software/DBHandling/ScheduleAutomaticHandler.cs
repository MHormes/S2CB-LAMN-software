using LAMN_Software.DataClasses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LAMN_Software.DBHandling
{
    public class ScheduleAutomaticHandler
    {
        List<Employee> employeeList;
        List<SchedulesMinimum> shiftList;
        List<Schedule> automaticScheduleList;
        List<Preference> preferenceList;
        List<Employee> managers;



        // method that counts the number of people assigned to a shift
        public List<Schedule> CreateAutomaticSchedule(int weekNmr, List<SchedulesMinimum> shiftList, List<Employee> employeeList, List<Schedule> currentSchedule, List<Preference> preferenceList, EmployeeHandler EH)
        {
            this.shiftList = shiftList;                         //list of shifts with minimum amount of employees required
            this.employeeList = employeeList;                   //list of all employees
            this.automaticScheduleList = currentSchedule;       //list with all schedules generated by automatic scheduling 
            this.preferenceList = preferenceList;               //list of employees' preferences
            managers = EH.GetManagers();

            preferenceList = preferenceList.OrderBy(a => Guid.NewGuid()).ToList();
            managers = managers.OrderBy(a => Guid.NewGuid()).ToList();
            employeeList = employeeList.OrderBy(a => Guid.NewGuid()).ToList();

            for (int i = 0; i < shiftList.Count(); i++) //managers first, then fill 80% of minimum people per shift
            {

                if (CheckIfManagerAssigned(shiftList[i], EH, weekNmr) == false)
                {
                    for (int c = 0; c < preferenceList.Count(); c++) //assign one manager to a shift according to preferences
                    {
                        if (EH.GetEmployee(preferenceList[c].EmployeeBSN).Position == JobPosition.MANAGER) //check if employee is a manager
                        {
                            if (MakeScheduleFromPreferences(preferenceList[c], shiftList[i], EH, weekNmr)) //if manager assigned then break the loop
                            {
                                break;
                            }
                        }
                    }
                }


                if (CheckIfManagerAssigned(shiftList[i], EH, weekNmr) == false)
                {
                    for (int c = 0; c < managers.Count(); c++) //if no preference for that shift then assign one random manager
                    {
                        if (MakeSchedule(managers[c], shiftList[i], EH, weekNmr))
                        {
                            break;
                        }
                    }
                }

                //after managers are assigned, assign employees to fill the 80% of schedules
                if (shiftList[i].MinimumPeople * 0.8 > CountPeopleOnShift(shiftList[i], weekNmr))
                {
                    for (int c = 0; c < preferenceList.Count(); c++) //assign one manager to a shift according to preferences
                    {
                        if (EH.GetEmployee(preferenceList[c].EmployeeBSN).Position != JobPosition.MANAGER) //check if employee is not a manager
                        {
                            MakeScheduleFromPreferences(preferenceList[c], shiftList[i], EH, weekNmr);
                            if (shiftList[i].MinimumPeople * 0.8 <= CountPeopleOnShift(shiftList[i], weekNmr))
                            {
                                break;
                            }
                        }
                    }
                }


                if (shiftList[i].MinimumPeople * 0.8 > CountPeopleOnShift(shiftList[i], weekNmr))
                {
                    for (int c = 0; c < employeeList.Count(); c++)
                    {
                        if (employeeList[c].Position != JobPosition.MANAGER) //check if employee is not a manager
                        {
                            MakeSchedule(employeeList[c], shiftList[i], EH, weekNmr);
                            if (shiftList[i].MinimumPeople * 0.8 <= CountPeopleOnShift(shiftList[i], weekNmr))
                            {
                                break;
                            }
                        }
                    }
                }
            }


            shiftList = shiftList.OrderBy(a => Guid.NewGuid()).ToList();
            preferenceList = preferenceList.OrderBy(a => Guid.NewGuid()).ToList();
            employeeList = employeeList.OrderBy(a => Guid.NewGuid()).ToList();
            //for statement to loop through the shifts - fill in rest of the shifts
            for (int i = 0; i < shiftList.Count(); i++)
            {

                if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr)) //break one iteration if minimum people has been met
                {
                    continue;
                }

                if (shiftList[i].MinimumPeople > CountPeopleOnShift(shiftList[i], weekNmr))
                {
                    for (int c = 0; c < preferenceList.Count(); c++) //first assigning shifts according to preferences
                    {
                        MakeScheduleFromPreferences(preferenceList[c], shiftList[i], EH, weekNmr);
                        if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr)) //break the loop if minimum people has been met
                        {
                            break;
                        }
                    }
                }


                if (shiftList[i].MinimumPeople > CountPeopleOnShift(shiftList[i], weekNmr)) //checking if more people need to be assigned so that minimum amount of people on shift is met
                {
                    for (int c = 0; c < employeeList.Count(); c++)
                    {
                        MakeSchedule(employeeList[c], shiftList[i], EH, weekNmr);
                        if (shiftList[i].MinimumPeople == CountPeopleOnShift(shiftList[i], weekNmr)) //break the loop if minimum people has been met
                        {
                            break;
                        }
                    }
                }
            }
            return this.automaticScheduleList;
        }

        private bool MakeScheduleFromPreferences(Preference p, SchedulesMinimum SM, EmployeeHandler EH, int weekNmr)
        {
            if ((p.Day == SM.Day) && (p.TimeSlot == SM.TimeSlot)) //check if preference matches the current shift we are looking for
            {
                if (CheckIfEmployeeAvailable(EH.GetEmployee(p.EmployeeBSN), SM, weekNmr)) //method to check if employee can be assigned to this shift
                {
                    if (CheckContractHours(EH.GetEmployee(p.EmployeeBSN), weekNmr)) //check contract hours
                    {
                        automaticScheduleList.Add(new Schedule(weekNmr, SM.Day, p.EmployeeBSN, SM.TimeSlot));
                        return true;
                    }
                }
            }
            return false;
        }

        private bool MakeSchedule(Employee e, SchedulesMinimum SM, EmployeeHandler EH, int weekNmr)
        {
            if (CheckIfEmployeeAvailable(e, SM, weekNmr)) //method to check if employee can be assigned to this shift
            {
                if (CheckContractHours(e, weekNmr)) //check contract hours
                {
                    automaticScheduleList.Add(new Schedule(weekNmr, SM.Day, e.Bsn, SM.TimeSlot));
                    return true;
                }
            }
            return false;
        }


        public bool CheckIfManagerAssigned(SchedulesMinimum SM, EmployeeHandler EH, int weekNmr)
        {
            for (int i = 0; i < automaticScheduleList.Count(); i++)
            {
                if (automaticScheduleList[i].Week == weekNmr)
                {
                    if ((automaticScheduleList[i].Day == SM.Day) && (automaticScheduleList[i].TimeSlot == SM.TimeSlot))
                    {
                        if (EH.GetEmployee(automaticScheduleList[i].EmployeeBSN).Position == JobPosition.MANAGER)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }



        // method that counts the number of people already assigned to a shift - check for minimum amount of people on shift
        private int CountPeopleOnShift(SchedulesMinimum SM, int weekNmr)
        {
            int count = 0;

            for (int i = 0; i < automaticScheduleList.Count(); i++) //shifts assigned through automatic scheduling
            {
                if (automaticScheduleList[i].Week == weekNmr)
                {
                    if ((automaticScheduleList[i].Day == SM.Day) && (automaticScheduleList[i].TimeSlot == SM.TimeSlot))
                    {
                        count++;
                    }
                }
            }
            return count; //returns the number of people already assigned to this shift
        }


        //method that checks availability of an employee
        private bool CheckIfEmployeeAvailable(Employee e, SchedulesMinimum SM, int weekNmr)
        {
            List<Schedule> employeeSchedule = new List<Schedule>(); //list of shifts for spcific employee

            for (int i = 0; i < automaticScheduleList.Count(); i++)
            {
                if (automaticScheduleList[i].Week == weekNmr)
                {
                    if ((automaticScheduleList[i].Day == SM.Day) && (automaticScheduleList[i].EmployeeBSN == e.Bsn))
                    {
                        employeeSchedule.Add(automaticScheduleList[i]);
                    }
                }
            }

            if (employeeSchedule.Count() >= 2) //if two or more shifts -> no more shifts possible on that day
            {
                return false;
            }
            if (employeeSchedule.Count() == 0) //shift possible if no other shifts on that day
            {
                return true;
            }
            else if (employeeSchedule.Count() == 1) //if one shift -> further check 
            {
                Schedule s = employeeSchedule[0];

                if (SM.TimeSlot == s.TimeSlot) //if employee is already assigned to this shift -> return false
                {
                    return false;
                }
                if ((SM.TimeSlot == TimeSlot.MORNING) && (s.TimeSlot == TimeSlot.EVENING)) //if shifts wouldnt be right after each other -> return false
                {
                    return false;
                }
                if ((SM.TimeSlot == TimeSlot.EVENING) && (s.TimeSlot == TimeSlot.MORNING)) //if shifts wouldnt be right after each other -> return false
                {
                    return false;
                }
                else //shifts right after each other -> return true
                {
                    return true;
                }
            }
            return false;
        }

        //check whether contract hours would be exceeded
        private bool CheckContractHours(Employee e, int weekNmr)
        {
            int hoursWorked = 0;

            for (int i = 0; i < automaticScheduleList.Count; i++)
            {
                if (automaticScheduleList[i].Week == weekNmr)
                {
                    if (e.Bsn == automaticScheduleList[i].EmployeeBSN)
                    {
                        hoursWorked += 4;
                    }
                }
            }

            if ((hoursWorked + 4) <= e.ContractHours)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
